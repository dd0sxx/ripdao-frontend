{"ast":null,"code":"var _jsxFileName = \"/Users/theo/Documents/ripdao-frontend/dapp/src/components/TokenList.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport TokenCard from './TokenCard';\nimport '../style/tokens.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet currentTokenList = [];\nlet lastBoughtTigerId;\nlet lastTigerBuyer;\n\nfunction TokenList({\n  provider,\n  address,\n  contract,\n  page,\n  tokensPerPage,\n  totalSupply,\n  setCurrentlyBuying,\n  walletOfOwner,\n  sortBy\n}) {\n  _s();\n\n  const [loadedSoFar, setLoadedSoFar] = useState(0);\n\n  async function buyEventListener(tigerId, price, buyer) {\n    console.log(`TigerBought tigerId ${tigerId}`);\n\n    if (tigerId && buyer) {\n      window.buyer = buyer;\n\n      if (lastBoughtTigerId && tigerId.eq(lastBoughtTigerId) && lastTigerBuyer && buyer.equals(lastTigerBuyer)) {\n        return;\n      }\n\n      lastBoughtTigerId = tigerId;\n      lastTigerBuyer = buyer;\n      setCurrentlyBuying(null);\n      await getPriceInfoFor(tigerId);\n    }\n  }\n\n  async function handleBuyEventSubscription() {\n    await contract.on(\"TigerBought\", buyEventListener);\n    return async () => {\n      await contract.off(\"TigerBought\", buyEventListener);\n    };\n  }\n\n  useEffect(() => {\n    return handleBuyEventSubscription();\n  }, []);\n\n  async function getPriceInfoFor(id) {\n    const tokenList = currentTokenList.slice();\n    let isForSale, price;\n    [isForSale, price] = await contract.isForSale(id);\n    let token = {\n      id: id,\n      isForSale: isForSale,\n      price: price\n    };\n    tokenList[id] = token;\n    currentTokenList = tokenList;\n    setLoadedSoFar(n => {\n      return n + 1;\n    });\n  }\n\n  async function getPriceInfo() {\n    setLoadedSoFar(0);\n\n    for (let id = 0; id < totalSupply; id++) {\n      await getPriceInfoFor(id);\n    }\n  }\n\n  useEffect(() => {\n    getPriceInfo();\n  }, []);\n\n  if (loadedSoFar > page * tokensPerPage) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tokenList\",\n      children: sortBy === 0 ? currentTokenList.slice(page * tokensPerPage, page * tokensPerPage + tokensPerPage).map(token => {\n        return /*#__PURE__*/_jsxDEV(TokenCard, {\n          token: token,\n          setCurrentlyBuying: setCurrentlyBuying\n        }, token.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 36\n        }, this);\n      }) : sortBy === 1 ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : sortBy === 2 ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : sortBy === 3 ? walletOfOwner.slice(page * tokensPerPage, page * tokensPerPage + tokensPerPage).map(token => {\n        return /*#__PURE__*/_jsxDEV(TokenCard, {\n          token: currentTokenList[Number(token)],\n          setCurrentlyBuying: setCurrentlyBuying\n        }, currentTokenList[Number(token)], false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 32\n        }, this);\n      }) : sortBy === 4 ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading Tigers...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this);\n  }\n}\n\n_s(TokenList, \"yRmuTcWkVC+8o1rRQ/VXUpUSIcg=\");\n\n_c = TokenList;\nexport default TokenList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenList\");","map":{"version":3,"sources":["/Users/theo/Documents/ripdao-frontend/dapp/src/components/TokenList.js"],"names":["useEffect","useState","TokenCard","currentTokenList","lastBoughtTigerId","lastTigerBuyer","TokenList","provider","address","contract","page","tokensPerPage","totalSupply","setCurrentlyBuying","walletOfOwner","sortBy","loadedSoFar","setLoadedSoFar","buyEventListener","tigerId","price","buyer","console","log","window","eq","equals","getPriceInfoFor","handleBuyEventSubscription","on","off","id","tokenList","slice","isForSale","token","n","getPriceInfo","map","Number"],"mappings":";;;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAO,qBAAP;;;AAEA,IAAIC,gBAAgB,GAAG,EAAvB;AACA,IAAIC,iBAAJ;AACA,IAAIC,cAAJ;;AAEA,SAASC,SAAT,CAAoB;AAACC,EAAAA,QAAD;AAAWC,EAAAA,OAAX;AAAoBC,EAAAA,QAApB;AAA8BC,EAAAA,IAA9B;AAAoCC,EAAAA,aAApC;AAAmDC,EAAAA,WAAnD;AAAgEC,EAAAA,kBAAhE;AAAoFC,EAAAA,aAApF;AAAmGC,EAAAA;AAAnG,CAApB,EAAgI;AAAA;;AAE5H,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,CAAD,CAA9C;;AAEA,iBAAeiB,gBAAf,CAAgCC,OAAhC,EAAyCC,KAAzC,EAAgDC,KAAhD,EAAuD;AACnDC,IAAAA,OAAO,CAACC,GAAR,CAAa,uBAAsBJ,OAAQ,EAA3C;;AACA,QAAIA,OAAO,IAAIE,KAAf,EAAsB;AAClBG,MAAAA,MAAM,CAACH,KAAP,GAAeA,KAAf;;AACA,UAAIjB,iBAAiB,IAAIe,OAAO,CAACM,EAAR,CAAWrB,iBAAX,CAArB,IACAC,cADA,IACkBgB,KAAK,CAACK,MAAN,CAAarB,cAAb,CADtB,EACoD;AAChD;AACH;;AACDD,MAAAA,iBAAiB,GAAGe,OAApB;AACAd,MAAAA,cAAc,GAAGgB,KAAjB;AACAR,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACA,YAAMc,eAAe,CAACR,OAAD,CAArB;AACH;AACJ;;AAED,iBAAeS,0BAAf,GAA6C;AACzC,UAAMnB,QAAQ,CAACoB,EAAT,CAAY,aAAZ,EAA2BX,gBAA3B,CAAN;AACA,WAAO,YAAY;AAAE,YAAMT,QAAQ,CAACqB,GAAT,CAAa,aAAb,EAA4BZ,gBAA5B,CAAN;AAAoD,KAAzE;AACH;;AAEDlB,EAAAA,SAAS,CAAC,MAAM;AAAC,WAAO4B,0BAA0B,EAAjC;AAAoC,GAA5C,EAA8C,EAA9C,CAAT;;AAGA,iBAAeD,eAAf,CAA+BI,EAA/B,EAAmC;AAC/B,UAAMC,SAAS,GAAG7B,gBAAgB,CAAC8B,KAAjB,EAAlB;AACA,QAAIC,SAAJ,EAAed,KAAf;AACC,KAACc,SAAD,EAAYd,KAAZ,IAAqB,MAAMX,QAAQ,CAACyB,SAAT,CAAmBH,EAAnB,CAA3B;AACD,QAAII,KAAK,GAAG;AAACJ,MAAAA,EAAE,EAAEA,EAAL;AAASG,MAAAA,SAAS,EAAEA,SAApB;AAA+Bd,MAAAA,KAAK,EAAEA;AAAtC,KAAZ;AACAY,IAAAA,SAAS,CAACD,EAAD,CAAT,GAAgBI,KAAhB;AACAhC,IAAAA,gBAAgB,GAAG6B,SAAnB;AACAf,IAAAA,cAAc,CAACmB,CAAC,IAAI;AAAC,aAAOA,CAAC,GAAG,CAAX;AAAa,KAApB,CAAd;AACH;;AAED,iBAAeC,YAAf,GAA8B;AAC1BpB,IAAAA,cAAc,CAAC,CAAD,CAAd;;AACI,SAAK,IAAIc,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGnB,WAAtB,EAAmCmB,EAAE,EAArC,EAAyC;AACrC,YAAMJ,eAAe,CAACI,EAAD,CAArB;AACH;AAGR;;AAED/B,EAAAA,SAAS,CAAC,MAAM;AAACqC,IAAAA,YAAY;AAAG,GAAvB,EAAyB,EAAzB,CAAT;;AAEA,MAAIrB,WAAW,GAAIN,IAAI,GAAGC,aAA1B,EAA0C;AACtC,wBAAQ;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBAEII,MAAM,KAAK,CAAX,GACIZ,gBAAgB,CAAC8B,KAAjB,CAAuBvB,IAAI,GAAGC,aAA9B,EAA6CD,IAAI,GAAGC,aAAP,GAAuBA,aAApE,EAAmF2B,GAAnF,CAAuFH,KAAK,IAAK;AAC7F,4BAAO,QAAC,SAAD;AAA0B,UAAA,KAAK,EAAEA,KAAjC;AAAwC,UAAA,kBAAkB,EAAEtB;AAA5D,WAAgBsB,KAAK,CAACJ,EAAtB;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFD,CADJ,GAKAhB,MAAM,KAAK,CAAX,gBACI,qCADJ,GAGAA,MAAM,KAAK,CAAX,gBACI,qCADJ,GAGAA,MAAM,KAAK,CAAX,GACAD,aAAa,CAACmB,KAAd,CAAoBvB,IAAI,GAAGC,aAA3B,EAA0CD,IAAI,GAAGC,aAAP,GAAuBA,aAAjE,EAAgF2B,GAAhF,CAAoFH,KAAK,IAAK;AAC1F,4BAAO,QAAC,SAAD;AAAiD,UAAA,KAAK,EAAEhC,gBAAgB,CAACoC,MAAM,CAACJ,KAAD,CAAP,CAAxE;AAAyF,UAAA,kBAAkB,EAAEtB;AAA7G,WAAgBV,gBAAgB,CAACoC,MAAM,CAACJ,KAAD,CAAP,CAAhC;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFD,CADA,GAKApB,MAAM,KAAK,CAAX,gBACI,qCADJ,gBAGI;AArBR;AAAA;AAAA;AAAA;AAAA,YAAR;AAwBH,GAzBD,MAyBO;AACH,wBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AACH;AACJ;;GA5EQT,S;;KAAAA,S;AA8ET,eAAeA,SAAf","sourcesContent":["import {useEffect, useState} from 'react';\nimport TokenCard from './TokenCard'\nimport '../style/tokens.css'\n\nlet currentTokenList = []\nlet lastBoughtTigerId\nlet lastTigerBuyer\n\nfunction TokenList ({provider, address, contract, page, tokensPerPage, totalSupply, setCurrentlyBuying, walletOfOwner, sortBy}) {\n\n    const [loadedSoFar, setLoadedSoFar] = useState(0)\n\n    async function buyEventListener(tigerId, price, buyer) {\n        console.log(`TigerBought tigerId ${tigerId}`)\n        if (tigerId && buyer) {\n            window.buyer = buyer\n            if (lastBoughtTigerId && tigerId.eq(lastBoughtTigerId) &&\n                lastTigerBuyer && buyer.equals(lastTigerBuyer)) {\n                return\n            }\n            lastBoughtTigerId = tigerId\n            lastTigerBuyer = buyer\n            setCurrentlyBuying(null)\n            await getPriceInfoFor(tigerId)\n        }\n    }\n    \n    async function handleBuyEventSubscription () {\n        await contract.on(\"TigerBought\", buyEventListener)\n        return async () => { await contract.off(\"TigerBought\", buyEventListener)}\n    }\n    \n    useEffect(() => {return handleBuyEventSubscription()}, [])\n\n \n    async function getPriceInfoFor(id) {\n        const tokenList = currentTokenList.slice()\n        let isForSale, price\n        ;[isForSale, price] = await contract.isForSale(id)\n        let token = {id: id, isForSale: isForSale, price: price}\n        tokenList[id] = token\n        currentTokenList = tokenList\n        setLoadedSoFar(n => {return n + 1})\n    }\n    \n    async function getPriceInfo() {\n        setLoadedSoFar(0)\n            for (let id = 0; id < totalSupply; id++) {\n                await getPriceInfoFor(id)\n            }\n\n\n    }\n\n    useEffect(() => {getPriceInfo()}, [])\n\n    if (loadedSoFar > (page * tokensPerPage)) {\n        return (<div className='tokenList'>\n                {\n                    sortBy === 0 ?\n                        currentTokenList.slice(page * tokensPerPage, page * tokensPerPage + tokensPerPage).map(token =>  {\n                            return <TokenCard key={token.id} token={token} setCurrentlyBuying={setCurrentlyBuying}/>\n                        })\n                    :\n                    sortBy === 1 ?\n                        <></>\n                    :\n                    sortBy === 2 ?\n                        <></>\n                    :\n                    sortBy === 3 ?\n                    walletOfOwner.slice(page * tokensPerPage, page * tokensPerPage + tokensPerPage).map(token =>  {\n                        return <TokenCard key={currentTokenList[Number(token)]} token={currentTokenList[Number(token)]} setCurrentlyBuying={setCurrentlyBuying}/>\n                    })\n                    :\n                    sortBy === 4 ?\n                        <></>\n                    : \n                        <></>\n                }\n                </div>)\n    } else {\n        return (<div>Loading Tigers...</div>)\n    }\n}\n\nexport default TokenList;\n"]},"metadata":{},"sourceType":"module"}