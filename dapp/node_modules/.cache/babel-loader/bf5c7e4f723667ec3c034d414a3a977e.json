{"ast":null,"code":"var _jsxFileName = \"/Users/theo/Documents/ripdao-frontend/dapp/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport '../style/app.css';\nimport Header from './Header.js';\nimport tigerNFTABI from '../assets/TigerNFT';\nimport ChainMsg from './Modal.js';\nimport BuyDialog from './BuyDialog.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [address, setAddress] = useState();\n  const [chainWarning, setChainWarning] = useState(false);\n  const [currentlyBuying, setCurrentlyBuying] = useState(null);\n  const totalSupply = 100;\n  let provider;\n  window.ethereum.enable().then(provider = new ethers.providers.Web3Provider(window.ethereum, \"mainnet\"));\n  const signer = provider.getSigner();\n  window.signer = signer; // const nftAddr = '0xDC04D8183a0C91c40E02dd5a0e06Ee6a2D25685F'\n  // const contract = new ethers.Contract(nftAddr, tigerNFTABI, provider);\n\n  const mainnet_chain_id = \"0x1\";\n  const sortOptions = ['by id', 'price low to high', 'price high to low', 'by tokens owned', 'last sold'];\n  window.ethereum.on('chainChanged', handleChainChanged);\n\n  function handleChainChanged(_chainId) {\n    if (_chainId.toString() !== mainnet_chain_id) {\n      setChainWarning(true);\n    }\n\n    window.location.reload();\n  }\n\n  async function connectToMetamask() {\n    try {\n      let res = await signer.getAddress();\n      console.log(\"Signed in\", res);\n      setAddress(res);\n\n      let _chainId = await window.ethereum.request({\n        method: 'eth_chainId'\n      });\n\n      if (_chainId.toString() !== mainnet_chain_id) {\n        setChainWarning(true);\n      }\n    } catch (err) {\n      console.log(\"Not signed in\");\n      await provider.send(\"eth_requestAccounts\", []);\n    }\n  } // const getWalletOfOwner = async () => {\n  //     console.log('meow')\n  //     let balanceBN = await contract.getBalance(address)\n  //     let balance = Number(balanceBN)\n  //     let temp = [...walletOfOwner]\n  //     for (let i = 0; i < balance; i++) {\n  //         let token = await contract.tigerByOwnerAndIndex(address, i)\n  //         temp.push(token)\n  //     }\n  //     console.log('temp: ',temp)\n  //     await setWalletOfOwner(temp)\n  //     return walletOfOwner\n  // }\n\n\n  useEffect(() => {\n    connectToMetamask().catch(err => console.error(err));\n  }, []); // useEffect(() => {\n  //     if (address) getWalletOfOwner().catch(err => console.error(err))\n  // }, [address])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      address: address,\n      connect: connectToMetamask,\n      sortOptions: sortOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ChainMsg, {\n      open: chainWarning,\n      setOpen: setChainWarning\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"RaSNdlUZx1AWZRAaLnVfVx4Bl80=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/theo/Documents/ripdao-frontend/dapp/src/components/App.js"],"names":["useEffect","useState","ethers","Header","tigerNFTABI","ChainMsg","BuyDialog","App","address","setAddress","chainWarning","setChainWarning","currentlyBuying","setCurrentlyBuying","totalSupply","provider","window","ethereum","enable","then","providers","Web3Provider","signer","getSigner","mainnet_chain_id","sortOptions","on","handleChainChanged","_chainId","toString","location","reload","connectToMetamask","res","getAddress","console","log","request","method","err","send","catch","error"],"mappings":"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","sourcesContent":["import {useEffect, useState} from 'react';\nimport { ethers } from 'ethers';\nimport '../style/app.css';\nimport Header from './Header.js';\nimport tigerNFTABI from '../assets/TigerNFT'\nimport ChainMsg from './Modal.js'\nimport BuyDialog from './BuyDialog.js'\n\nfunction App() {\n\n    const [address, setAddress] = useState()\n    const [chainWarning, setChainWarning] = useState(false)\n    const [currentlyBuying, setCurrentlyBuying] = useState(null)\n    \n    const totalSupply = 100\n\n    let provider\n    window.ethereum.enable().then(provider = new ethers.providers.Web3Provider(window.ethereum, \"mainnet\"))\n    const signer = provider.getSigner()\n    window.signer = signer\n    // const nftAddr = '0xDC04D8183a0C91c40E02dd5a0e06Ee6a2D25685F'\n    // const contract = new ethers.Contract(nftAddr, tigerNFTABI, provider);\n    const mainnet_chain_id = \"0x1\"\n\n    const sortOptions = ['by id', 'price low to high', 'price high to low', 'by tokens owned', 'last sold']\n\n    window.ethereum.on('chainChanged', handleChainChanged);\n\n    function handleChainChanged(_chainId) {\n        if (_chainId.toString() !== mainnet_chain_id) {\n            setChainWarning(true)\n        }\n        window.location.reload()\n    }\n\n    async function connectToMetamask() {\n        try {\n            let res = await signer.getAddress()\n            console.log(\"Signed in\", res)\n            setAddress(res)\n            let _chainId = (await window.ethereum.request({ method: 'eth_chainId' }))\n            if (_chainId.toString() !== mainnet_chain_id) {\n                setChainWarning(true)\n            }\n        }\n        catch(err) {\n            console.log(\"Not signed in\")\n            await provider.send(\"eth_requestAccounts\", [])\n        }\n    }\n\n    // const getWalletOfOwner = async () => {\n    //     console.log('meow')\n    //     let balanceBN = await contract.getBalance(address)\n    //     let balance = Number(balanceBN)\n    //     let temp = [...walletOfOwner]\n    //     for (let i = 0; i < balance; i++) {\n    //         let token = await contract.tigerByOwnerAndIndex(address, i)\n    //         temp.push(token)\n    //     }\n    //     console.log('temp: ',temp)\n    //     await setWalletOfOwner(temp)\n    //     return walletOfOwner\n    // }\n\n    useEffect(() => {connectToMetamask().catch(err => console.error(err))}, [])\n\n    // useEffect(() => {\n    //     if (address) getWalletOfOwner().catch(err => console.error(err))\n    // }, [address])\n\n    return (\n        <div className=\"app\">\n        <Header address={address} connect={connectToMetamask} sortOptions={sortOptions}/>\n    \n            <ChainMsg open={chainWarning} setOpen={setChainWarning}/>\n            {/* <BuyDialog currentlyBuying={currentlyBuying} setCurrentlyBuying={setCurrentlyBuying} contract={contract} address={address} signer={signer}/> */}\n            </div>\n        );\n    }\n\n    export default App;\n"]},"metadata":{},"sourceType":"module"}