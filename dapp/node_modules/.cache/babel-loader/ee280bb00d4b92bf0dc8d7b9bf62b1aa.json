{"ast":null,"code":"var _jsxFileName = \"/Users/theo/Documents/ripdao-frontend/dapp/src/components/Header.js\";\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport '../style/header.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Header({\n  address,\n  connect,\n  sortOptions,\n  setSortBy\n}) {\n  function setSort(e) {\n    sortOptions.forEach((item, i) => {\n      if (e.target.value === item) setSortBy(i);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"header flex-centered\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tiger NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"sort: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => setSort(e),\n        style: {\n          marginLeft: 5,\n          border: '1px solid black'\n        },\n        children: sortOptions.map((option, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n          children: option\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: connect,\n      className: \"address\",\n      children: address ? `${address.slice(0, 6)}...${address.slice(-4)}` : 'connect to metamask!'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Header;\nexport default Header;\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["/Users/theo/Documents/ripdao-frontend/dapp/src/components/Header.js"],"names":["useEffect","useState","ethers","Header","address","connect","sortOptions","setSortBy","setSort","e","forEach","item","i","target","value","marginLeft","border","map","option","slice"],"mappings":";AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,qBAAP;;;AAEA,SAASC,MAAT,CAAiB;AAACC,EAAAA,OAAD;AAAUC,EAAAA,OAAV;AAAmBC,EAAAA,WAAnB;AAAgCC,EAAAA;AAAhC,CAAjB,EAA6D;AAEzD,WAASC,OAAT,CAAkBC,CAAlB,EAAqB;AACjBH,IAAAA,WAAW,CAACI,OAAZ,CAAoB,CAACC,IAAD,EAAOC,CAAP,KAAa;AAC7B,UAAIH,CAAC,CAACI,MAAF,CAASC,KAAT,KAAmBH,IAAvB,EAA6BJ,SAAS,CAACK,CAAD,CAAT;AAChC,KAFD;AAGH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,QAAQ,EAAGH,CAAD,IAAOD,OAAO,CAACC,CAAD,CAAhC;AAAqC,QAAA,KAAK,EAAE;AAACM,UAAAA,UAAU,EAAE,CAAb;AAAgBC,UAAAA,MAAM,EAAE;AAAxB,SAA5C;AAAA,kBAEIV,WAAW,CAACW,GAAZ,CAAiB,CAACC,MAAD,EAASN,CAAT,kBACb;AAAA,oBACKM;AADL,WAAaN,CAAb;AAAA;AAAA;AAAA;AAAA,gBADJ;AAFJ;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA,eAaA;AAAK,MAAA,OAAO,EAAEP,OAAd;AAAuB,MAAA,SAAS,EAAC,SAAjC;AAAA,gBACID,OAAO,GACN,GAAEA,OAAO,CAACe,KAAR,CAAc,CAAd,EAAgB,CAAhB,CAAmB,MAAKf,OAAO,CAACe,KAAR,CAAc,CAAC,CAAf,CAAkB,EADtC,GAEP;AAHJ;AAAA;AAAA;AAAA;AAAA,YAbA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH;;KA7BQhB,M;AA+BT,eAAeA,MAAf","sourcesContent":["import {useEffect, useState} from 'react';\nimport { ethers } from 'ethers';\nimport '../style/header.css'\n\nfunction Header ({address, connect, sortOptions, setSortBy}) {\n\n    function setSort (e) {\n        sortOptions.forEach((item, i) => {\n            if (e.target.value === item) setSortBy(i)\n        })\n    }\n\n    return (\n        <div className='header flex-centered'>\n        <h1>Tiger NFT</h1>\n        <div className='flex'>\n            <div>sort: </div>\n            <select onChange={(e) => setSort(e)} style={{marginLeft: 5, border: '1px solid black'}}>\n                {\n                sortOptions.map( (option, i) => (\n                    <option key={i}>\n                        {option}</option>\n                ))\n                }\n            </select>\n        </div>\n        <div onClick={connect} className='address'>{\n            address ?\n            `${address.slice(0,6)}...${address.slice(-4)}` :\n            'connect to metamask!'\n        }</div>\n        </div>\n    )\n}\n\nexport default Header\n"]},"metadata":{},"sourceType":"module"}